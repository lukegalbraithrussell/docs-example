name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'my-website/**'

jobs:
  build:
    name: Build Docusaurus
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: ./my-website/package-lock.json  # Specify the path to the lock file

      - name: Install dependencies
        run: npm ci
        working-directory: ./my-website

      - name: Read version from YAML file
        id: read_version
        run: |
          sdkLatestVersionValue=$(grep 'sdkLatestVersion:' my-website/version.yml | awk '{print $2}')
          okhttpVersionValue=$(grep 'okhttpVersion:' my-website/version.yml | awk '{print $2}')
          slf4jApiVersionValue=$(grep 'slf4jApiVersion:' my-website/version.yml | awk '{print $2}')
          kotlinVersionValue=$(grep 'kotlinVersion:' my-website/version.yml | awk '{print $2}')
          helidonVersionValue=$(grep 'helidonVersion:' my-website/version.yml | awk '{print $2}')
          javaxWebsocketApiVersionValue=$(grep 'javaxWebsocketApiVersion:' my-website/version.yml | awk '{print $2}')
          springBootVersionValue=$(grep 'springBootVersion:' my-website/version.yml | awk '{print $2}')
          compatibleMicronautVersionValue=$(grep 'compatibleMicronautVersion:' my-website/version.yml | awk '{print $2}')
          quarkusVersionValue=$(grep 'quarkusVersion:' my-website/version.yml | awk '{print $2}')
          tyrusStandaloneClientVersionValue=$(grep 'tyrusStandaloneClientVersion:' my-website/version.yml | awk '{print $2}')
          echo "sdkLatestVersion=$sdkLatestVersionValue" >> $GITHUB_ENV
          echo "okhttpVersion=$okhttpVersionValue" >> $GITHUB_ENV
          echo "slf4jApiVersion=$slf4jApiVersionValue" >> $GITHUB_ENV
          echo "kotlinVersion=$kotlinVersionValue" >> $GITHUB_ENV
          echo "helidonVersion=$helidonVersionValue" >> $GITHUB_ENV
          echo "javaxWebsocketApiVersion=$javaxWebsocketApiVersionValue" >> $GITHUB_ENV
          echo "springBootVersion=$springBootVersionValue" >> $GITHUB_ENV
          echo "compatibleMicronautVersion=$compatibleMicronautVersionValue" >> $GITHUB_ENV
          echo "quarkusVersion=$quarkusVersionValue" >> $GITHUB_ENV
          echo "tyrusStandaloneClientVersion=$tyrusStandaloneClientVersionValue" >> $GITHUB_ENV

      - name: Replace placeholders in Markdown files
        run: |
          DOCS_DIR="./my-website/content"
          find $DOCS_DIR -name "*.md" | while read file; do
            sed -i "s/sdkLatestVersion/${{ env.sdkLatestVersion }}/g" "$file"
            sed -i "s/okhttpVersion/${{ env.okhttpVersion }}/g" "$file"
            sed -i "s/slf4jApiVersion/${{ env.slf4jApiVersion }}/g" "$file"
            sed -i "s/kotlinVersion/${{ env.kotlinVersion }}/g" "$file"
            sed -i "s/helidonVersion/${{ env.helidonVersion }}/g" "$file"
            sed -i "s/javaxWebsocketApiVersion/${{ env.javaxWebsocketApiVersion }}/g" "$file"
            sed -i "s/springBootVersion/${{ env.springBootVersion }}/g" "$file"
            sed -i "s/compatibleMicronautVersion/${{ env.compatibleMicronautVersion }}/g" "$file"
            sed -i "s/quarkusVersion/${{ env.quarkusVersion }}/g" "$file"
            sed -i "s/tyrusStandaloneClientVersion/${{ env.tyrusStandaloneClientVersion }}/g" "$file"
            done

      - name: Build website
        run: npm run build
        working-directory: ./my-website

      - name: Upload Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./my-website/build  # Specify the build directory path

  deploy:
    name: Deploy to GitHub Pages
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
